!function(){"use strict";class e{constructor(e,t){this._form=t,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass}_setEventListeners(){this._inputElements=[...this._form.querySelectorAll(this._inputSelector)],this.submitBtn=this._form.querySelector(this._submitButtonSelector),this._inputElements.forEach((e=>{e.addEventListener("input",(t=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}_showInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.add(this._errorClass),t.textContent=e.validationMessage}_hideInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.remove(this._errorClass),e.classList.remove(this._inputErrorClass),t.textContent=""}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_isFormValid(){return this._inputElements.every((e=>e.validity.valid))}_toggleButtonState(){this._isFormValid()?(this.submitBtn.classList.remove(this._inactiveButtonClass),this.submitBtn.disabled=!1):(this.submitBtn.classList.add(this._inactiveButtonClass),this.submitBtn.disabled=!0)}enableValidation(){this._setEventListeners()}resetValidation(){this._toggleButtonState(),this._inputElements.forEach((e=>{this._hideInputError(e)}))}}class t{constructor(e,t,s,i,r){let{name:n,link:a,_id:o,isLiked:l}=e;this.name=n,this.link=a,this._id=o,this.isLiked=l,this._cardTemplate=t,this._handleImageClick=s,this._handleDeleteClick=i,this._handleAddLike=r}_setEventListeners(){this._likeBtn.addEventListener("click",(()=>{this._handleAddLike(this)})),this._cardElement.querySelector("#trash-button").addEventListener("click",(()=>{this._handleDeleteClick(this)})),this._cardImageEl.addEventListener("click",(()=>{this._handleImageClick({name:this.name,link:this.link})}))}setIsLiked(e){this.isLiked=e,this._renderLikes()}_renderLikes(){this.isLiked?this._likeBtn.classList.add("card__like-button_active"):this._likeBtn.classList.remove("card__like-button_active")}handleDeleteCard(){this._cardElement.remove(),this._cardElement=null}getView(){return this._cardElement=document.querySelector(this._cardTemplate).content.querySelector(".card").cloneNode(!0),this._likeBtn=this._cardElement.querySelector(".card__like-button"),this._cardImageEl=this._cardElement.querySelector(".card__image"),this._cardTitleEl=this._cardElement.querySelector(".card__description-text"),this._cardTitleEl.textContent=this.name,this._cardImageEl.src=this.link,this._cardImageEl.alt=this.name+"Photo",this._setEventListeners(),this._renderLikes(),this._cardElement}}class s{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){document.removeEventListener("keydown",this._handleEscClose),this._popupElement.classList.remove("modal_opened")}_handleEscClose=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._popupElement.querySelector(".modal__close-button").addEventListener("click",(()=>{this.close()})),this._popupElement.addEventListener("click",(e=>{e.target.classList.contains("modal_opened")&&this.close()}))}}class i extends s{constructor(e,t){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._submitBtn=this._popupElement.querySelector(".modal__save-button"),this._handleFormSubmit=t}close(){this._popupForm.reset(),super.close()}_getInputValues(){const e=this._popupForm.querySelectorAll(".modal__form-input"),t={};return e.forEach((e=>t[e.name]=e.value)),t}setLoading(e){this._submitBtn.textContent=e?"Saving...":"Save"}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}}const r={formSelector:".modal__form",inputSelector:".modal__form-input",submitButtonSelector:".modal__save-button",inactiveButtonClass:"modal__save-button_disabled",inputErrorClass:"modal__error",errorClass:"modal__form-input_type_error"},n=document.querySelector("#profile-title-input"),a=document.querySelector("#profile-subtitle-input"),o=document.forms["modal-form"],l=document.querySelector("#image-edit-form"),d=document.querySelector("#profile-avatar-image"),c=document.querySelector("#image-edit-form"),h=document.querySelector("#profile-pencil"),u=document.querySelector("#add-card-modal").querySelector("#add-card-form"),_=document.querySelector(".cards__list"),m=document.querySelector("#preview-modal").querySelector(".modal__image"),p=document.querySelector("#profile-edit-button"),v=document.querySelector("#add-card-button"),E=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}_checkResponce(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{method:"GET",headers:this._headers}).then((e=>this._checkResponce(e)))}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{method:"GET",headers:this._headers}).then((e=>this._checkResponce(e)))}updateUserInfo(e){let{name:t,description:s}=e;return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:s})}).then((e=>this._checkResponce(e)))}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then((e=>this._checkResponce(e)))}addCard(e){let{name:t,link:s}=e;return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:s})}).then((e=>this._checkResponce(e)))}setLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then((e=>this._checkResponce(e)))}removeLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then((e=>this._checkResponce(e)))}changeAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then((e=>this._checkResponce(e)))}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"8591f7fe-0114-4a2f-84de-cfb13be7817c","Content-Type":"application/json"}});function f(e){return e.isLiked?E.removeLike(e._id).then((t=>{e.setIsLiked(t.isLiked)})).catch((e=>{alert(`${e} Failed to add/remove like.`)})):E.setLike(e._id).then((t=>{e.setIsLiked(t.isLiked)})).catch((e=>{alert(`${e} Failed to add/remove like.`)}))}function L(e){I.open(),I.setSubmitAction((()=>{I.setDeleteLoading(!0),E.deleteCard(e._id).then((t=>{e.handleDeleteCard(t),I.close()})).catch((e=>{alert(`${e} Failed to delete post.`)})).finally((()=>{I.setDeleteLoading(!1)}))}))}function k(e){C.open(e)}E.getInitialCards().then((e=>{B.setItems(e),B.renderItems()})).catch((e=>{alert(`${e} Failed to get cards.`)})),E.getUserInfo().then((e=>{g.setUserInfo({name:e.name,description:e.about}),g.setUserAvatar(e.avatar)})).catch((e=>{alert(`${e} Failed to get user info.`)})),d.addEventListener("click",(()=>{q.open()})),h.addEventListener("click",(()=>{q.open()})),v.addEventListener("click",(()=>{b.resetValidation(),y.open()})),p.addEventListener("click",(()=>{const{name:e,description:t}=g.getUserInfo();n.value=e,a.value=t,S.open()})),m.addEventListener("click",(()=>{C.open()})),new e(r,l).enableValidation();const b=new e(r,u);b.enableValidation(),new e(r,o).enableValidation();const S=new i("#profile-edit-modal",(function(e){S.setLoading(!0),E.updateUserInfo(e).then((t=>{g.setUserInfo(e),S.close()})).catch((e=>{alert(`${e} Failed to change user info.`)})).finally((()=>{S.setLoading(!1)}))}));S.setEventListeners();const g=new class{constructor(e){let{title:t,subtitle:s,avatar:i}=e;this._title=document.querySelector(t),this._subtitle=document.querySelector(s),this._avatar=document.querySelector(i)}getUserInfo(){return{name:this._title.textContent,description:this._subtitle.textContent}}setUserInfo(e){let{name:t,description:s}=e;this._title.textContent=t,this._subtitle.textContent=s}setUserAvatar(e){this._avatar.src=e}}({title:".profile__title",subtitle:".profile__subtitle",avatar:".profile__image"}),y=new i("#add-card-modal",(function(e){let{title:t,subtitle:s}=e;y.setLoading(!0),E.addCard({name:t,link:s}).then((e=>{B.addItem(e),y.close()})).catch((e=>{alert(`${e} Failed to add card.`)})).finally((()=>{y.setLoading(!1)}))}));y.setEventListeners();const C=new class extends s{constructor(e){super({popupSelector:e}),this._modalImage=document.querySelector(".modal__image"),this._previewCaption=document.querySelector(".modal__caption")}open(e){let{name:t,link:s}=e;this._modalImage.src=s,this._modalImage.alt=t,this._previewCaption.textContent=t,super.open()}}("#preview-modal");C.setEventListeners();const I=new class extends s{constructor(e){super({popupSelector:e}),this._form=this._popupElement.querySelector(".modal__form"),this._deleteSubmitBtn=this._popupElement.querySelector("#confirm-button")}setSubmitAction(e){this._handleSubmit=e}setDeleteLoading(e){this._deleteSubmitBtn.textContent=e?"Deleting...":"Yes"}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._handleSubmit()}))}}("#delete-popup");I.setEventListeners();const q=new i("#profile-image-modal",(function(e){q.setLoading(!0),E.changeAvatar(e.link).then((e=>{g.setUserAvatar(e.avatar),q.close()})).catch((e=>{alert(`${e} Failed to change avatar.`)})).finally((()=>{q.setLoading(!1)}))}));q.setEventListeners(),new e(r,c).enableValidation();const B=new class{constructor(e,t){let{items:s,renderer:i}=e;this._items=s,this._renderer=i,this._container=t}setItems(e){this._items=e}renderItems(){this._items.forEach((e=>{this.addItem(e)}))}addItem(e){const t=this._renderer(e);this._container.prepend(t)}}({items:[],renderer:function(e){return new t(e,"#card-template",k,L,f).getView()}},_)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,